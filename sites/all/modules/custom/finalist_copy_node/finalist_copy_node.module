<?php

/**
 * @file
 * small module to copy specific nodes and clear old nodes so the database
 * does not get flodded.
 *
 * depents on regular cron runs
 */

/*
 * Implements hook_cron()
 * Controller to initiate copy
 */
function finalist_copy_node_cron() {
  // TODO: cron interval to a variable that can be set in the admin interface

  // get last cron run for this else use last system cron time.
  $last_cron = variable_get('finalist_copy_node_cron', variable_get('cron_last'));

  // dpm("Last cron run was: " . $last_cron);

  // one hour ago: ( minus 3600 seconds (60*60))
  $one_hour_ago = (time() - 3600);
  // dpm("one hour ago: " . $one_hour_ago);

  if($last_cron >= $one_hour_ago OR true == true) { // added true for dev
    // time to run cron again
    // give job to controller
    if(_finalist_copy_node_controller()) {
      // on succes update last cron run to now
      variable_set('finalist_copy_node_cron', time());
    }
  }
}

/*
 * putting this in a hook_node_view so I can just refresh the page with a node
 * and also dpm does not seam to work in a hook_cron
 */
// function finalist_copy_node_node_view($node, $view_mode, $langcode) {


// }
/*
 * logic component
 *
 * insert new nodes as other content type
 *
 * delete nodes from JSON crawled feed except the most recent ones or call
 * JOSN feed imedetly after.
 */
function _finalist_copy_node_controller() {
  // load nodes
  $nids = _finalist_copy_node_select_nodes('latest');

  // save nodes as new content type
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $node->type = 'traject_history';

    // insert timestamp should be: YYYY-MM-DD HH:MM:SS
    $timestamp = strptime($node->field_timestamp[LANGUAGE_NONE][0]['value'], "d-m-Y H:i:s");
    // $timestamp = strftime("%Y-%m-%d H:i:s", mktime($timestamp));
    $timestamp = date ("Y-m-d H:i:s", mktime($timestamp));
    $node->field_divv_timestamp[LANGUAGE_NONE][0]['value'] = $timestamp;
    unset($node->field_timestamp);

    $node->field_divv_location_name[LANGUAGE_NONE][0]['value'] = $node->field_location[LANGUAGE_NONE][0]['value'];
    unset($node->field_location);

    $node->field_divv_velocity[LANGUAGE_NONE][0]['value'] = $node->field_velocity[LANGUAGE_NONE][0]['value'];
    unset($node->field_velocity);
    // inserting as new but moving the node to 'traject_history' content type
    $node->is_new = TRUE;
    unset($node->nid);
    unset($node->vid);

    node_save($node);


  }

  $all_nids = _finalist_copy_node_select_nodes('all');

  // remove $nids from $all_nids array to keep the latest in the db
  $nids_of_nodes_to_delete = array_diff($all_nids, $nids);
  // dsm($all_nids);
  // dsm($nids);
  // dsm($nids_of_nodes_to_delete);
  _finalist_copy_node_delete_nodes($nids_of_nodes_to_delete);

  return TRUE;
}

/**
 * delets nodes with nid that is given in $nids array
 * @param array $nids array of nids
 */
function _finalist_copy_node_delete_nodes($nids) {
  // select all nodes from db
  foreach($nids as $nid) {
    node_delete($nid);
  }
}

/*
 * function select nodes
 * select latest traject nodes per traject
 * returns array with node nid's
 */
function _finalist_copy_node_select_nodes($all_or_latest, $type = 'traject'){

  // select all node nids of $type
  if($all_or_latest == 'all') {
    $result = db_query('SELECT n.nid FROM {node} n
      WHERE n.type = :type',
      array( ':type' => $type ) );
  }

  // select latest node nids of $type
  elseif ($all_or_latest == 'latest') {
    $result = db_query('SELECT n.nid FROM {node} n
      JOIN {field_data_field_location} l ON n.nid = l.entity_id
      GROUP BY l.field_location_value
      ORDER BY n.created ASC',
      array( ':type' => $type ) );
  }

  $nodes = $result->fetchAll();

  // convert to simple array
  foreach ($nodes as $node) {
    $returnarray[] = $node->nid;
  }

  return $returnarray;
}

// /**
//  * temp for dev only function call to simulate cron and show output
//  */
// function finalist_copy_node_node_view($node, $view_mode, $langcode) {

// }


