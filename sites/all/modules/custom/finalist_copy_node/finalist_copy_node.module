<?php

/**
 * @file
 * small module to copy specific nodes and clear old nodes so the database
 * does not get flodded.
 *
 * depents on regular cron runs
 */

/*
 * Implements hook_cron()
 * Controller to initiate copy
 */
function finalist_copy_node_cron() {
  // TODO: cron interval to a variable that can be set in the admin interface

  // get last cron run for this else use last system cron time.
  $last_cron = variable_get('finalist_copy_node_cron', variable_get('cron_last'));

  // dpm("Last cron run was: " . $last_cron);

  // one hour ago: ( minus 3600 seconds (60*60))
  $one_hour_ago = (time() - 3600);
  // dpm("one hour ago: " . $one_hour_ago);

  if($last_cron >= $one_hour_ago OR true == true) { // added true for dev
    // time to run cron again

    // give job to controller
    if(_finalist_copy_node_controller()) {
      // on succes update last cron run to now
      variable_set('finalist_copy_node_cron', time());
    }
  }
}

/*
 * putting this in a hook_node_view so I can just refresh the page with a node
 * and also dpm does not seam to work in a hook_cron
 */
// function finalist_copy_node_node_view($node, $view_mode, $langcode) {


// }
/*
 * logic component
 *
 * insert new nodes as other content type
 *
 * delete nodes from JSON crawled feed except the most recent ones or call
 * JOSN feed imedetly after.
 */
function _finalist_copy_node_controller() {
  // load nodes

  foreach ($nodes as $node) {
    // dsm($node);
    // set content type
    $node->type = 'traject_history';
    // not inserting as new but moving the node to 'traject_history' content type
    // $node->is_new = TRUE;
    node_save($node);
    break;
  }
}


/*
 * function select nodes
 * select latest traject nodes per traject
 * returns array with node nid's
 */
function finalist_copy_node_select_nodes(){

  // select the latest traject nodes
  $result = db_query('SELECT n.nid FROM {node} n
    JOIN {field_data_field_location} l ON n.nid = l.entity_id
    GROUP BY l.field_location_value
    ORDER BY n.created ASC');

  $nodes = $result->fetchAll();

  // convert to simple array
  foreach ($nodes as $node) {
    $returnvalue[] = $node->nid;
  }

  return $returnvalue;
}

function finalist_copy_node_node_view($node, $view_mode, $langcode) {
  finalist_copy_node_select_nodes();
}
 /*
 * function insert nodes
 * (node_save())
 */

/*
 * function delete nodes older then one hour
 */
